namespace TypeSharp.Test;

public class ModelTests
{
    [TypeScriptGenerator]
    public enum HttpStatus
    {
        None,
        OK = 200,
        NotFound = 404,
    }

    [TypeScriptGenerator]
    public class NormalModel
    {
        public int Int { get; set; }
        public string Str { get; set; }
        public object Obj { get; set; }
    }

    [TypeScriptGenerator]
    public class NullableModel
    {
        public int? Int_Nul { get; set; }
        public string? Str_Nul { get; set; }
        public object? Obj_Nul { get; set; }
    }

    [TypeScriptGenerator]
    public class RequiredModel
    {
        public required int Int { get; set; }
        public required string Str { get; set; }
        public required object Obj { get; set; }
    }

    [TypeScriptGenerator]
    public class RequiredNullableModel
    {
        public required int? Int_Nul { get; set; }
        public required string? Str_Nul { get; set; }
        public required object? Obj_Nul { get; set; }
    }

    public class AA
    {
        public object Obj { get; set; }
    }

    [Fact]
    public void Test()
    {
        var _generator = new TypeScriptGenerator(new()
        {
            CamelCase = true,
            //DetectionMode = DetectionMode.AutoDetect,
        })
        {
            typeof(AA),
        };
        var code = _generator.GetCode();
        var expected = """
/* Generated by TypeSharpV3 dev-version */
export enum HttpStatus {
  None = 0,
  OK = 200,
  NotFound = 404
}
export interface Model<T> {
  status: HttpStatus;
  typeRef?: T;
  typeRef_N?: T;
  typeRef_R: T;
  typeRef_RN: T;
  csInt32: number;
  csInt32_N?: number;
  csInt32_RN: number | undefined;
  csString_N?: string;
  csString_R: string;
  csString_RN: string;
}
""";
        Assert.Equal(expected, code);
    }
}
